===============================================================================
                    PIPELINE DE DESENVOLVIMENTO - INTERPRETADOR BNF
===============================================================================

FASE 1: ANALISE E PLANEJAMENTO
===============================================================================

1.1 Analise da Gramatica Completa ✓ DEFINIDA PELO PROFESSOR
----------------------------------
[x] Revisar toda a gramatica BNF (EBNF fornecida na lista)
[x] Identificar todos os tokens necessarios (todos listados)
[ ] Mapear precedencia de operadores (aplicacao e lambda)
[ ] Identificar construcoes especiais (lambda calculus puro)
[x] Definir semantica de avaliacao (beta-reduction + ambiente)

1.2 Definicao de Requisitos ✓ ESPECIFICADOS PELO PROFESSOR
---------------------------
[x] Especificar formato de entrada (arquivo de definicoes + sessao)
[x] Definir formato de saida (resultado das avaliacoes)
[x] Listar casos de teste essenciais (arquivo com true, false, and, etc.)
[x] Definir tratamento de erro (syntax/runtime errors)
[ ] Especificar funcionalidades extras (carregar arquivo de definicoes)

REQUISITOS ESPECIFICOS DA LISTA:
- Deve processar arquivo de definicoes com true, false, and, or, etc.
- Deve rodar em Linux Mint 22.1 via apt
- Deve processar sessoes com statements e newlines
- Deve suportar lambda em 3 formatos: λ, \, lambda
- Deve fazer binding de variaveis (nome: expressao)
- Deve avaliar expressoes lambda calculus

1.3 Arquitetura do Sistema ✓ PYTHON RECOMENDADO
--------------------------
[x] Escolher linguagem de implementacao (Python - disponivel via apt)
[ ] Definir estrutura de modulos (lexer.py, parser.py, interpreter.py, main.py)
[ ] Planejar estruturas de dados (AST classes, Environment)
[ ] Definir interfaces entre componentes (Token -> AST -> Value)

ESTRUTURA SUGERIDA:
lambda_interpreter/
├── lexer.py          # Tokenizacao
├── parser.py         # AST generation  
├── interpreter.py    # Avaliacao/beta-reduction
├── main.py          # CLI interface
├── definitions.lc   # Arquivo com true, false, and, etc.
└── test_cases.lc    # Casos de teste

===============================================================================

FASE 2: IMPLEMENTACAO DO FRONTEND
===============================================================================

2.1 Analise Lexica (Lexer)
---------------------------
[ ] Implementar classe Token com tipo, valor, posicao
[ ] Criar enum TokenType para todos os tokens
[ ] Implementar Lexer basico
    [ ] Leitura de caracteres
    [ ] Reconhecimento de palavras-chave
    [ ] Reconhecimento de identificadores
    [ ] Reconhecimento de literais
    [ ] Reconhecimento de operadores
    [ ] Tratamento de whitespace e comentarios
[ ] Adicionar tratamento de erro no lexer
[ ] Criar testes unitarios para o lexer

2.2 Analise Sintatica (Parser)
-------------------------------
[ ] Definir classes AST para cada construcao da gramatica
[ ] Implementar parser recursivo descendente
    [ ] Metodo para cada regra da gramatica
    [ ] Tratamento de precedencia
    [ ] Recuperacao de erro
[ ] Implementar pretty-printer para AST
[ ] Criar testes unitarios para o parser

===============================================================================

FASE 3: IMPLEMENTACAO DO BACKEND
===============================================================================

3.1 Ambiente de Execucao
-------------------------
[ ] Implementar tabela de simbolos
    [ ] Escopo aninhado
    [ ] Lookup de variaveis
    [ ] Gerenciamento de binding
[ ] Implementar stack de chamadas (se necessario)
[ ] Definir representacao de valores em runtime

3.2 Interpretador/Avaliador
----------------------------
[ ] Implementar visitor pattern ou similar
[ ] Implementar avaliacao para cada tipo de AST
    [ ] Expressoes aritmeticas
    [ ] Variaveis e binding
    [ ] Funcoes lambda
    [ ] Aplicacao de funcao
    [ ] Estruturas condicionais
    [ ] Estruturas de repeticao
[ ] Implementar built-ins (se houver)
[ ] Adicionar garbage collection (se necessario)

===============================================================================

FASE 4: TESTES E VALIDACAO
===============================================================================

4.1 Casos de Teste
-------------------
[ ] Criar suite de testes basicos
    [ ] Expressoes simples
    [ ] Binding de variaveis
    [ ] Funcoes lambda
    [ ] Aplicacao de funcao
[ ] Criar testes de integracao
[ ] Criar testes de erro (syntax error, runtime error)
[ ] Criar testes de performance (se relevante)

4.2 Validacao
--------------
[ ] Testar contra especificacao da gramatica
[ ] Validar semantica com casos conhecidos
[ ] Teste de stress com programas grandes
[ ] Verificar memory leaks e performance

===============================================================================

FASE 5: REFINAMENTO E OTIMIZACAO
===============================================================================

5.1 Tratamento de Erro
-----------------------
[ ] Melhorar mensagens de erro
    [ ] Posicao precisa do erro
    [ ] Sugestoes de correcao
    [ ] Contexto do erro
[ ] Implementar recuperacao de erro no parser
[ ] Adicionar warnings uteis

5.2 Otimizacoes
---------------
[ ] Otimizar lexer (buffering, lookahead)
[ ] Otimizar parser (memoization se necessario)
[ ] Otimizar interpretador
    [ ] Tail call optimization
    [ ] Constant folding
    [ ] Dead code elimination

5.3 Funcionalidades Extras
---------------------------
[ ] Implementar REPL (Read-Eval-Print Loop)
[ ] Adicionar modo debug (step-by-step)
[ ] Implementar pretty-printer para output
[ ] Adicionar profiling (se necessario)

===============================================================================

FASE 6: DOCUMENTACAO E ENTREGA
===============================================================================

6.1 Documentacao
-----------------
[ ] Documentar API do interpretador
[ ] Criar manual do usuario
[ ] Documentar gramatica suportada
[ ] Criar exemplos de uso

6.2 Empacotamento
-----------------
[ ] Criar estrutura de projeto organizada
[ ] Adicionar sistema de build (se necessario)
[ ] Criar executavel standalone (se desejado)
[ ] Preparar para distribuicao

===============================================================================

CRONOGRAMA SUGERIDO
===============================================================================

Fase                    | Duracao Estimada | Prioridade
------------------------|------------------|------------
1 - Analise            | 1-2 dias         | Alta
2 - Frontend           | 3-5 dias         | Alta
3 - Backend            | 4-7 dias         | Alta
4 - Testes             | 2-3 dias         | Media
5 - Refinamento        | 2-4 dias         | Baixa
6 - Documentacao       | 1-2 dias         | Baixa

Total: ~13-23 dias (dependendo da complexidade da gramatica)

===============================================================================

PROXIMOS PASSOS IMEDIATOS ✓ BASEADOS NA LISTA DE EXERCICIOS
===============================================================================

1. ✓ Gramatica completa ja fornecida pelo professor
2. ✓ Requisitos especificos definidos na lista  
3. ✓ Python escolhido (disponivel via apt no Linux Mint)
4. [ ] Criar arquivo definitions.lc com todas as definicoes da lista
5. [ ] Implementar casos de teste simples para guiar desenvolvimento

ARQUIVO DEFINITIONS.LC OBRIGATORIO:
true:(λt. (λf. t))
false:(λt. (λf. f))  
and:(λa. (λb. ((a b) a)))
or:(λa. (λb. ((a a) b)))
not:(λb. ((b false) true))
if:(λp. (λa. (λb. ((p a) b))))
pair:(λx. (λy. (λf. ((f x) y))))
cons:(λx. (λy. (λf. ((f x) y))))
first:(λp. (p true))
car:(λp. (p true))
second:(λp. (p false))
cdr:(λp. (p false))
nil:(λx. true)
empty:(λx. true)
null:(λp. (p (λx. (λy. false))))
isempty: (λp. (p (λx. (λy. false))))
tree:(λd. (λl. (λr. ((pair d) ((pair l) r)))))
datum:(λt. (first t))
left:(λt. (first (second t)))
right:(λt. (second (second t)))
incr:(λn. (λf. (λy. (f ((n f) y)))))
plus:(λm. (λn. ((m incr) n)))
times:(λm. (λn. ((m (plus n)) zero)))
iszero:(λn. ((n (λy. false)) true))
0:(λf. (λx. x))
1:(λf. (λx. (f x)))
2:(λf. (λx. (f (f x))))
3:(λf. (λx. (f (f (f x)))))
4:(λf. (λx. (f (f (f (f x))))))
5:(λf. (λx. (f (f (f (f (f x)))))))
6:(λf. (λx. (f (f (f (f (f (f x))))))))
7:(λf. (λx. (f (f (f (f (f (f (f x)))))))))
8:(λf. (λx. (f (f (f (f (f (f (f (f x))))))))))
9:(λf. (λx. (f (f (f (f (f (f (f (f (f x))))))))))

===============================================================================

DICAS IMPORTANTES
===============================================================================

- Comece pequeno: Implemente um subconjunto minimo primeiro
- Teste cedo e frequentemente: Cada componente deve ter testes
- Mantenha separacao clara: Lexer -> Parser -> Interpreter
- Use TDD: Escreva testes antes da implementacao
- Documente decisoes: Especialmente decisoes semanticas
- Versionamento: Use git para acompanhar progresso

===============================================================================

CHECKLIST RAPIDO PARA CADA FASE - PROBLEMA 1 DA LISTA
===============================================================================

FASE 1 - ANALISE (QUASE COMPLETA):
[x] Gramatica EBNF fornecida pelo professor
[x] Requisitos claros na lista de exercicios
[x] Python escolhido (apt install python3)
[ ] Casos de teste com definitions.lc criados
[ ] Estrutura de modulos definida

FASE 2 - FRONTEND (IMPLEMENTACAO):
[ ] Lexer reconhecendo todos tokens da EBNF
[ ] Parser gerando AST para session/statement/expression
[ ] Suporte aos 3 tipos de lambda (λ, \, lambda)
[ ] Tratamento de newlines correto (Windows vs Linux)
[ ] Testes unitarios passando

FASE 3 - BACKEND (CORE):
[ ] Interpretador fazendo beta-reduction
[ ] Environment com bindings funcionando
[ ] Carregamento do arquivo definitions.lc
[ ] Avaliacao de Church encodings (numeros, booleanos)
[ ] Aplicacao de funcao funcionando

FASE 4 - TESTES (VALIDACAO):
[ ] Teste com todas as definicoes obrigatorias
[ ] Validacao de true, false, and, or, not
[ ] Teste de numeros Church (0, 1, 2, ..., 9)
[ ] Teste de operacoes (plus, times, incr)
[ ] Teste de estruturas (pair, first, second)

FASE 5 - REFINAMENTO (ENTREGA):
[ ] Instrucoes de compilacao/execucao no relatorio
[ ] Codigo fonte organizado para entrega
[ ] Funciona no Linux Mint 22.1
[ ] Mensagens de erro claras

FASE 6 - ENTREGA FINAL:
[ ] Relatorio LaTeX com scrartcl, fonte 12
[ ] Codigo fonte separado do relatorio
[ ] Instrucoes de instalacao/execucao
[ ] Arquivo definitions.lc incluido

===============================================================================

GRAMATICA EBNF COMPLETA (DA LISTA):
===============================================================================

<session>      ::= ( [ <statement> ] <newline> )*
<statement>    ::= <expression> | <binding>
<binding>      ::= <NAME> <COLON> <expression>
<expression>   ::= <NAME>
                | <LPAR> <lambda> <NAME> <DOT> <expression> <RPAR>
                | <LPAR> <expression> <expression> <RPAR>
<lambda>       ::= <LAMBDA_CHR> | <BACKSLASH> | <LAMBDA_STR>
<DOT>          ::= '.'
<COLON>        ::= ':'
<LPAR>         ::= '('
<RPAR>         ::= ')'
<LAMBDA_CHR>   ::= 'λ'    # Unicode U+03BB
<LAMBDA_STR>   ::= 'lambda'
<BACKSLASH>    ::= '\'
<NAME>         ::= [a-zA-Z0-9_]+

OBSERVACOES IMPORTANTES:
- Quebras de linha sao significativas (terminam statements)
- Diferenca entre Windows (\r\n) e Linux (\n) 
- Unicode lambda (U+03BB) deve ser suportado
- Deve carregar arquivo de definicoes obrigatorias
- Nao pode ter definicoes hard-coded

===============================================================================